import{I as n,b as y,c as P,d as E,e as V}from"./validate-field-CBWFAOsB.js";import{a as B,c as x,o as v,b as p,u as o,F as O}from"./index-BohIvy7G.js";const T={__name:"PhysicsPersonForm",props:["modelValue","formError"],emits:["update:formError"],setup(u,{expose:f,emit:h}){const c=u,t=h,e=B({name:!1,cpf:!1,dateOfBirth:!1,phone:!1}),{modelValue:r}=c,l=()=>{e.name=!1,V(r.physicsPerson.name)||(e.name=!0,t("update:formError",!0))},i=()=>{e.cpf=!1,E(r.physicsPerson.cpf)||(e.cpf=!0,t("update:formError",!0))},d=()=>{e.dateOfBirth=!1,P(r.physicsPerson.dateOfBirth)||(e.dateOfBirth=!0,t("update:formError",!0))},m=()=>{e.phone=!1,y(r.physicsPerson.phone)||(e.phone=!0,t("update:formError",!0))};return f({validateName:l,validateCpf:i,validateDateOfBirth:d,validatePhone:m}),(g,s)=>(v(),x(O,null,[p(n,{text:"Nome",type:"text",modelValue:o(r).physicsPerson.name,"onUpdate:modelValue":s[0]||(s[0]=a=>o(r).physicsPerson.name=a),errorMessage:"Digite um nome válido",hasError:e.name,onBlur:l,dataTest:"physics-person__name"},null,8,["modelValue","hasError"]),p(n,{text:"CPF",type:"text",modelValue:o(r).physicsPerson.cpf,"onUpdate:modelValue":s[1]||(s[1]=a=>o(r).physicsPerson.cpf=a),errorMessage:"O cpf deve ter 11 caracteres",hasError:e.cpf,onBlur:i,dataTest:"physics-person__cpf"},null,8,["modelValue","hasError"]),p(n,{text:"Data de nascimento",type:"date",modelValue:o(r).physicsPerson.dateOfBirth,"onUpdate:modelValue":s[2]||(s[2]=a=>o(r).physicsPerson.dateOfBirth=a),errorMessage:"Preencha uma data válida",hasError:e.dateOfBirth,onBlur:d,dataTest:"physics-person__date"},null,8,["modelValue","hasError"]),p(n,{text:"Telefone",type:"text",modelValue:o(r).physicsPerson.phone,"onUpdate:modelValue":s[3]||(s[3]=a=>o(r).physicsPerson.phone=a),errorMessage:"o telefone deve apenas números e ter 11 dígitos com DDD",hasError:e.phone,onBlur:m,dataTest:"physics-person__phone"},null,8,["modelValue","hasError"])],64))}};export{T as _};
